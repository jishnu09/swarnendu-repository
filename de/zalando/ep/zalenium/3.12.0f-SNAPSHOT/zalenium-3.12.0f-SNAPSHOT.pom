<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>de.zalando.ep</groupId>
  <artifactId>zalenium</artifactId>
  <name>Zalenium</name>
  <version>3.12.0f-SNAPSHOT</version>
  <description>An on-demand, dynamic local Selenium Grid with an extension to a cloud testing platform.</description>
  <inceptionYear>2016</inceptionYear>
  <developers>
    <developer>
      <name>Diego Molina</name>
      <email>diemol@gmail.com</email>
      <url>https://github.com/diemol</url>
      <organization>Zalando SE</organization>
      <organizationUrl>https://tech.zalando.com/</organizationUrl>
    </developer>
    <developer>
      <name>Leo Gallucci</name>
      <email>elgalu3@gmail.com</email>
      <url>https://github.com/elgalu</url>
      <organization>Zalando SE</organization>
      <organizationUrl>https://tech.zalando.com/</organizationUrl>
    </developer>
  </developers>
  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <scm>
    <connection>scm:git:https://github.com/zalando/zalenium</connection>
    <developerConnection>scm:git:git@github.com:zalando/zalenium.git</developerConnection>
    <url>https://github.com/zalando/zalenium</url>
  </scm>
  <organization>
    <name>Zalando SE</name>
  </organization>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven-resources-plugin.version}</version>
        <executions>
          <execution>
            <id>start-stop-script</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <resources>
                <resource>
                  <directory>scripts</directory>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>docker</directory>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>.</directory>
                  <includes>
                    <include>LICENSE.md</include>
                    <include>Analytics.md</include>
                    <include>scm-source.json</include>
                  </includes>
                </resource>
                <resource>
                  <directory>src/test/resources</directory>
                  <includes>
                    <include>browserstack_capabilities.json</include>
                    <include>testingbot_capabilities.json</include>
                  </includes>
                </resource>
                <resource>
                  <directory>src/main/resources</directory>
                  <includes>
                    <include>logging_info.properties</include>
                    <include>logging_debug.properties</include>
                    <include>logback.xml</include>
                  </includes>
                </resource>
                <resource>
                  <directory>dashboard</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>${versions-maven-plugin.version}</version>
        <configuration>
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-scm-plugin</artifactId>
        <version>1.9.5</version>
        <configuration>
          <pushChanges>false</pushChanges>
          <tag>${project.version}</tag>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin}</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <showDeprecation>true</showDeprecation>
          <showWarnings>true</showWarnings>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifestSections>
              <manifestSection>
                <Name>Build-Info</Name>
                <manifestEntries>
                  <Selenium-Version>${selenium-server.major-minor.version}.${selenium-server.patch-level.version}</Selenium-Version>
                </manifestEntries>
              </manifestSection>
            </manifestSections>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>${aspectj-maven-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <showWeaveInfo>true</showWeaveInfo>
          <weaveDependencies>
            <weaveDependency>
              <groupId>org.seleniumhq.selenium</groupId>
              <artifactId>selenium-server</artifactId>
            </weaveDependency>
          </weaveDependencies>
          <complianceLevel>1.8</complianceLevel>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven-shade-plugin.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <filters>
                <filter>
                  <artifact>*.*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <artifactSet />
              <relocations>
                <relocation>
                  <pattern>org.eclipse.jetty</pattern>
                  <shadedPattern>org.seleniumhq.jetty9</shadedPattern>
                </relocation>
              </relocations>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit47</artifactId>
            <version>${maven-surefire-plugin.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <systemPropertyVariables>
            <java.util.logging.SimpleFormatter.format>%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$-6s %5$s %6$s%n</java.util.logging.SimpleFormatter.format>
          </systemPropertyVariables>
          <skipTests>${skip.surefire.tests}</skipTests>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>coverage-report</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>coverage-initialize</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>
              <execution>
                <id>coverage-site</id>
                <phase>package</phase>
                <goals>
                  <goal>report</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <destFile>${basedir}/target/coverage-reports/coverage-unit.exec</destFile>
              <dataFile>${basedir}/target/coverage-reports/coverage-unit.exec</dataFile>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>build-docker-image</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>docker-build-zalenium-image</id>
                <phase>package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skip.failsafe.setup}</skip>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <executable>docker</executable>
                  <arguments>
                    <argument>build</argument>
                    <argument>-t</argument>
                    <argument>${project.artifactId}:${project.version}</argument>
                    <argument>.</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>integration-test</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${maven-failsafe-plugin.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <parallel>methods</parallel>
              <threadCount>${threadCountProperty}</threadCount>
              <skipAfterFailureCount>10</skipAfterFailureCount>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>docker-build-zalenium</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skip.failsafe.setup}</skip>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <executable>docker</executable>
                  <arguments>
                    <argument>build</argument>
                    <argument>-t</argument>
                    <argument>${project.artifactId}:${project.version}</argument>
                    <argument>.</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>enable-zalenium_in_docker</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <executable>chmod</executable>
                  <arguments>
                    <argument>+x</argument>
                    <argument>zalenium_in_docker.sh</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>docker-run-zalenium</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skip.failsafe.setup}</skip>
                  <executable>${project.build.directory}/zalenium_in_docker.sh</executable>
                  <arguments>
                    <argument>start</argument>
                    <argument>${project.artifactId}:${project.version}</argument>
                    <argument>${integrationToTest}</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>docker-stop-zalenium</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skip.failsafe.setup}</skip>
                  <executable>${project.build.directory}/zalenium_in_docker.sh</executable>
                  <arguments>
                    <argument>stop</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <dependencies>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>9.4.8.v20171121</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>*</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.fabric8</groupId>
      <artifactId>openshift-server-mock</artifactId>
      <version>3.1.11</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>tools</artifactId>
          <groupId>com.sun</groupId>
        </exclusion>
        <exclusion>
          <artifactId>kubernetes-server-mock</artifactId>
          <groupId>io.fabric8</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>hamcrest-core</artifactId>
          <groupId>org.hamcrest</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>2.18.3</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>byte-buddy-agent</artifactId>
          <groupId>net.bytebuddy</groupId>
        </exclusion>
        <exclusion>
          <artifactId>objenesis</artifactId>
          <groupId>org.objenesis</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>6.14.3</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>bsh</artifactId>
          <groupId>org.apache-extras.beanshell</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>3.1.0</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>hamcrest-library</artifactId>
          <groupId>org.hamcrest</groupId>
        </exclusion>
        <exclusion>
          <artifactId>hamcrest-core</artifactId>
          <groupId>org.hamcrest</groupId>
        </exclusion>
        <exclusion>
          <artifactId>objenesis</artifactId>
          <groupId>org.objenesis</groupId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>
  <properties>
    <exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>
    <mockito.version>2.18.3</mockito.version>
    <maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
    <testng.version>6.14.3</testng.version>
    <ch.qos.logback.version>1.2.3</ch.qos.logback.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <jacoco-maven-plugin.version>0.7.9</jacoco-maven-plugin.version>
    <logstash-logback-encoder.version>5.1</logstash-logback-encoder.version>
    <maven.compiler.source>1.8</maven.compiler.source>
    <docker-client.version>8.11.2</docker-client.version>
    <junit.version>4.12</junit.version>
    <skip.surefire.tests>${skipTests}</skip.surefire.tests>
    <selenium-server.patch-level.version>0</selenium-server.patch-level.version>
    <selenium-server.major-minor.version>3.12</selenium-server.major-minor.version>
    <aspectj-maven-plugin.version>1.11</aspectj-maven-plugin.version>
    <slf4j.version>1.7.25</slf4j.version>
    <maven-shade-plugin.version>3.1.0</maven-shade-plugin.version>
    <maven-surefire-plugin.version>2.21.0</maven-surefire-plugin.version>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <awaitility.version>3.1.0</awaitility.version>
    <jetty.version>9.4.8.v20171121</jetty.version>
    <skipTests>false</skipTests>
    <maven-failsafe-plugin.version>2.21.0</maven-failsafe-plugin.version>
    <prometheus.version>0.3.0</prometheus.version>
    <aspectj.version>1.8.13</aspectj.version>
    <integrationToTest>sauceLabs</integrationToTest>
    <maven.compiler.plugin>3.7.0</maven.compiler.plugin>
    <threadCountProperty>1</threadCountProperty>
    <versions-maven-plugin.version>2.5</versions-maven-plugin.version>
    <skip.failsafe.setup>false</skip.failsafe.setup>
    <kubernetes-client.version>3.1.11</kubernetes-client.version>
  </properties>
</project>

